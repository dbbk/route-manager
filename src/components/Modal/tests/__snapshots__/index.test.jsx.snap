// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Modal /> should not render anything by default 1`] = `
.c0 .Modal {
  opacity: 0;
  will-change: opacity,transform;
  -webkit-transition: -webkit-transform 0.8s 0.4s,opacity 0.2s 0.4s;
  -webkit-transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
  transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
  margin: 0 auto;
  width: 100%;
}

.c0 .Modal:focus {
  outline: none;
}

.c0 .Modal_after-open {
  opacity: 1;
  -webkit-transform: translateY(0);
  -ms-transform: translateY(0);
  transform: translateY(0);
}

.c0 .Modal_before-close {
  opacity: 0;
  -webkit-transform: translateY(40px);
  -ms-transform: translateY(40px);
  transform: translateY(40px);
  -webkit-transition: -webkit-transform 0.8s,opacity 0.2s;
  -webkit-transition: transform 0.8s,opacity 0.2s;
  transition: transform 0.8s,opacity 0.2s;
}

.c0 .Overlay {
  overflow-y: scroll;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  opacity: 0;
  will-change: background-color;
  -webkit-transition: background-color 0.1s;
  transition: background-color 0.1s;
}

.c0 .Overlay_after-open {
  opacity: 0.99;
  -webkit-transform: translateY(0);
  -ms-transform: translateY(0);
  transform: translateY(0);
}

.c0 .Overlay_before-close {
  opacity: 0;
  -webkit-transform: translateY(0);
  -ms-transform: translateY(0);
  transform: translateY(0);
  -webkit-transition: -webkit-transform 0.8s 0.4s,opacity 0.2s 0.4s;
  -webkit-transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
  transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
}

@media (min-width:768px) {
  .c0 .Modal {
    max-width: 800px;
    padding: 100px 0;
    -webkit-transform: translateY(20px);
    -ms-transform: translateY(20px);
    transform: translateY(20px);
  }
}

<Modal
  handleClose={[Function]}
  isOpen={false}
>
  <div>
    <Styled(ReactModalAdapter)
      closeTimeoutMS={300}
      contentLabel="Modal"
      isOpen={false}
      onRequestClose={[Function]}
    >
      <ReactModalAdapter
        className="c0"
        closeTimeoutMS={300}
        contentLabel="Modal"
        isOpen={false}
        modalClassName={
          Object {
            "afterOpen": "Modal_after-open",
            "base": "Modal",
            "beforeClose": "Modal_before-close",
          }
        }
        onRequestClose={[Function]}
        overlayClassName={
          Object {
            "afterOpen": "Overlay_after-open",
            "base": "Overlay",
            "beforeClose": "Overlay_before-close",
          }
        }
      >
        <Modal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          className={
            Object {
              "afterOpen": "Modal_after-open",
              "base": "Modal",
              "beforeClose": "Modal_before-close",
            }
          }
          closeTimeoutMS={300}
          contentLabel="Modal"
          isOpen={false}
          onRequestClose={[Function]}
          overlayClassName={
            Object {
              "afterOpen": "Overlay_after-open",
              "base": "Overlay",
              "beforeClose": "Overlay_before-close",
            }
          }
          parentSelector={[Function]}
          portalClassName="sc-jzJRlG c0"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
        >
          <ModalPortal
            ariaHideApp={false}
            bodyOpenClassName="ReactModal__Body--open"
            className={
              Object {
                "afterOpen": "Modal_after-open",
                "base": "Modal",
                "beforeClose": "Modal_before-close",
              }
            }
            closeTimeoutMS={300}
            contentLabel="Modal"
            defaultStyles={
              Object {
                "content": Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                },
                "overlay": Object {
                  "backgroundColor": "rgba(255, 255, 255, 0.75)",
                  "bottom": 0,
                  "left": 0,
                  "position": "fixed",
                  "right": 0,
                  "top": 0,
                },
              }
            }
            isOpen={false}
            onRequestClose={[Function]}
            overlayClassName={
              Object {
                "afterOpen": "Overlay_after-open",
                "base": "Overlay",
                "beforeClose": "Overlay_before-close",
              }
            }
            parentSelector={[Function]}
            portalClassName="sc-jzJRlG c0"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {},
                "overlay": Object {},
              }
            }
          />
        </Modal>
      </ReactModalAdapter>
    </Styled(ReactModalAdapter)>
  </div>
</Modal>
`;

exports[`<Modal /> should render children when isOpen is true 1`] = `
.c4 {
  height: 18px;
}

.c2 {
  border: none;
  outline: none;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 38px;
  height: 38px;
}

.c1 {
  display: inline-block;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  border-radius: 50%;
  padding: 0;
  cursor: pointer;
  box-shadow: 0 2px 30px 0;
}

.c5 .Modal {
  opacity: 0;
  will-change: opacity,transform;
  -webkit-transition: -webkit-transform 0.8s 0.4s,opacity 0.2s 0.4s;
  -webkit-transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
  transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
  margin: 0 auto;
  width: 100%;
}

.c5 .Modal:focus {
  outline: none;
}

.c5 .Modal_after-open {
  opacity: 1;
  -webkit-transform: translateY(0);
  -ms-transform: translateY(0);
  transform: translateY(0);
}

.c5 .Modal_before-close {
  opacity: 0;
  -webkit-transform: translateY(40px);
  -ms-transform: translateY(40px);
  transform: translateY(40px);
  -webkit-transition: -webkit-transform 0.8s,opacity 0.2s;
  -webkit-transition: transform 0.8s,opacity 0.2s;
  transition: transform 0.8s,opacity 0.2s;
}

.c5 .Overlay {
  overflow-y: scroll;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  opacity: 0;
  will-change: background-color;
  -webkit-transition: background-color 0.1s;
  transition: background-color 0.1s;
}

.c5 .Overlay_after-open {
  opacity: 0.99;
  -webkit-transform: translateY(0);
  -ms-transform: translateY(0);
  transform: translateY(0);
}

.c5 .Overlay_before-close {
  opacity: 0;
  -webkit-transform: translateY(0);
  -ms-transform: translateY(0);
  transform: translateY(0);
  -webkit-transition: -webkit-transform 0.8s 0.4s,opacity 0.2s 0.4s;
  -webkit-transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
  transition: transform 0.8s 0.4s,opacity 0.2s 0.4s;
}

.c0 {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1;
}

@media (min-width:768px) {
  .c5 .Modal {
    max-width: 800px;
    padding: 100px 0;
    -webkit-transform: translateY(20px);
    -ms-transform: translateY(20px);
    transform: translateY(20px);
  }
}

<Modal
  handleClose={[Function]}
  isOpen={true}
>
  <div>
    <CloseButtonWrapper>
      <div
        className="c0"
      >
        <CloseButton
          element="button"
          id="modal-close"
          onClick={[Function]}
        >
          <Styled(Primitive)
            element="button"
            id="modal-close"
            onClick={[Function]}
          >
            <Primitive
              className="c1"
              element="button"
              id="modal-close"
              onClick={[Function]}
            >
              <ResetButton
                className="c1"
                element="button"
                fontSize="regular"
                id="modal-close"
                onClick={[Function]}
                render={[Function]}
                size="regular"
              >
                <Button
                  className="c1 c2"
                  element="button"
                  fontSize="regular"
                  id="modal-close"
                  onClick={[Function]}
                  render={[Function]}
                  size="regular"
                >
                  <button
                    className="c1 c2"
                    id="modal-close"
                    onClick={[Function]}
                    size="regular"
                  >
                    <styled.div>
                      <div
                        className="c3"
                      >
                        <Styled(Close)
                          color="grey"
                        >
                          <Close
                            className="c4"
                            color="grey"
                          >
                            <svg
                              className="c4"
                              color="grey"
                              viewBox="0 0 32 32"
                            >
                              <path
                                d="M18.507 16l9.404-9.404a1.778 1.778 0 0 0-2.51-2.505l-9.402 9.402-9.404-9.422a1.785 1.785 0 1 0-2.524 2.524l9.422 9.404-9.422 9.404a1.778 1.778 0 1 0 2.505 2.509L16 18.505l9.404 9.404a1.778 1.778 0 0 0 2.505-2.51z"
                              />
                            </svg>
                          </Close>
                        </Styled(Close)>
                      </div>
                    </styled.div>
                  </button>
                </Button>
              </ResetButton>
            </Primitive>
          </Styled(Primitive)>
        </CloseButton>
      </div>
    </CloseButtonWrapper>
    <Styled(ReactModalAdapter)
      closeTimeoutMS={300}
      contentLabel="Modal"
      isOpen={true}
      onRequestClose={[Function]}
    >
      <ReactModalAdapter
        className="c5"
        closeTimeoutMS={300}
        contentLabel="Modal"
        isOpen={true}
        modalClassName={
          Object {
            "afterOpen": "Modal_after-open",
            "base": "Modal",
            "beforeClose": "Modal_before-close",
          }
        }
        onRequestClose={[Function]}
        overlayClassName={
          Object {
            "afterOpen": "Overlay_after-open",
            "base": "Overlay",
            "beforeClose": "Overlay_before-close",
          }
        }
      >
        <Modal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          className={
            Object {
              "afterOpen": "Modal_after-open",
              "base": "Modal",
              "beforeClose": "Modal_before-close",
            }
          }
          closeTimeoutMS={300}
          contentLabel="Modal"
          isOpen={true}
          onRequestClose={[Function]}
          overlayClassName={
            Object {
              "afterOpen": "Overlay_after-open",
              "base": "Overlay",
              "beforeClose": "Overlay_before-close",
            }
          }
          parentSelector={[Function]}
          portalClassName="sc-jzJRlG c5"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
        >
          <ModalPortal
            ariaHideApp={false}
            bodyOpenClassName="ReactModal__Body--open"
            className={
              Object {
                "afterOpen": "Modal_after-open",
                "base": "Modal",
                "beforeClose": "Modal_before-close",
              }
            }
            closeTimeoutMS={300}
            contentLabel="Modal"
            defaultStyles={
              Object {
                "content": Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                },
                "overlay": Object {
                  "backgroundColor": "rgba(255, 255, 255, 0.75)",
                  "bottom": 0,
                  "left": 0,
                  "position": "fixed",
                  "right": 0,
                  "top": 0,
                },
              }
            }
            isOpen={true}
            onRequestClose={[Function]}
            overlayClassName={
              Object {
                "afterOpen": "Overlay_after-open",
                "base": "Overlay",
                "beforeClose": "Overlay_before-close",
              }
            }
            parentSelector={[Function]}
            portalClassName="sc-jzJRlG c5"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {},
                "overlay": Object {},
              }
            }
          >
            <div
              aria-modal="true"
              className="Overlay Overlay_after-open"
              onClick={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              style={Object {}}
            >
              <div
                aria-label="Modal"
                className="Modal Modal_after-open"
                onClick={[Function]}
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                style={Object {}}
                tabIndex="-1"
              >
                <div>
                  <h1>
                    You can seee this markup.
                  </h1>
                </div>
              </div>
            </div>
          </ModalPortal>
        </Modal>
      </ReactModalAdapter>
    </Styled(ReactModalAdapter)>
  </div>
</Modal>
`;
